---
author: [Aidan Dyga, Nicholas Ingerson-Meacham, Ochirsaikhan Davaajambal, Keller Liptrap, Sabrina Rodriguez]
title: A Comparative Analysis of Sorting Algorithms using Doubling Experiments
page-layout: full
categories: [post, containment checking, lists]
date: "2024-02-16"
date-format: long
toc: true
---


# Sorty-Sort Overview

An algorithm analysis tool that utilizes a doubling experiment to predict big O time complexity.

## Use the following commands to run the tool

1. source env/bin/activate
2. python main.py


### Introduction

here

### Running the Tool

how to with source code

### Sorting Algorithms and Output for Each

everyone describe yours here

#### Timsort

describe algorithm

provide output

#### Quicksort

In this implementation of the algorithm, the `quicksort` function serves as a wrapper function to start the sorting process. It calls the `_quicksort` function, passing the list `L`, the leftmost index (`0`), and the rightmost index (`len(L)`).

The `_quicksort` function performs the recursive sorting process. It checks if the sublist has more than one element and, if so, calls the `partition` function to partition the sublist into smaller sublists.

The `partition` function selects a random pivot element within the sublist and places it at the end. Then, it initializes two pointers, `i` and `j`, at the beginning and end of the sublist, respectively. The function then iterates through the sublist, swapping elements to ensure that all elements less than the pivot are on the left side and all elements greater than or equal to the pivot are on the right side. Finally, it places the pivot in its correct location within the sublist and returns its index.

The quicksort algorithm is not the most efficient sorting algorithm we benchmarked, as its worst-case time complexity is *O(n)*.

```
```

provide output

#### Mergesort

describe algorithm

provide output

#### Bubblesort

describe algorithm

provide output

### Conclusion

here

### What we could improve?

ideas like ai here
